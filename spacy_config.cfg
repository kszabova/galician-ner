[paths]
train = "train.spacy"
dev = "test.spacy"

[system]
seed = 0
gpu_allocator = null

[nlp]
lang = "en"
# List of pipeline component names, in order. The names should correspond to
# components defined in the [components block]
pipeline = ["ner"]

[nlp.tokenizer]
@tokenizers = "spacy.Tokenizer.v1"

# The pipeline components and their models
[components]

[components.ner]
factory = "ner"

# Readers for corpora like dev and train.
[corpora]

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
augmenter = null

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}

# Training hyper-parameters and additional features.
[training]
seed = ${system.seed}
gpu_allocator = ${system.gpu_allocator}
dropout = 0.1
accumulate_gradient = 1
# Controls early-stopping, i.e., the number of steps to continue without
# improvement before stopping. 0 disables early stopping.
patience = 1600
# Number of epochs. 0 means unlimited. If >= 0, train corpus is loaded once in
# memory and shuffled within the training loop. -1 means stream train corpus
# rather than loading in memory with no shuffling within the training loop.
max_epochs = 0
# Maximum number of update steps to train for. 0 means an unlimited number of steps.
max_steps = 1000
eval_frequency = 200
# Names of pipeline components that should set annotations during training
annotating_components = ["ner"]
# Location in the config where the dev corpus is defined
dev_corpus = "corpora.dev"
# Location in the config where the train corpus is defined
train_corpus = "corpora.train"

[training.logger]
@loggers = "spacy.ConsoleLogger.v1"

[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = false
tolerance = 0.2

[training.batcher.size]
@schedules = "compounding.v1"
start = 100
stop = 1000
compound = 1.001

[training.optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = false
eps = 1e-8
learn_rate = 0.001

[output]
path: "output.spacy"
